(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{275:function(e,r,t){"use strict";function s(){try{return navigator.userAgent}catch(e){return"<environment undetectable>"}}t.r(r),t.d(r,"getUserAgent",(function(){return s}))},299:function(e,r,t){"use strict";t.r(r),t.d(r,"request",(function(){return _}));var s=t(306),o=t.n(s),i=t(275);function n(e,r,t){if("string"==typeof r){let[e,s]=r.split(" ");t=Object.assign(s?{method:e,url:s}:{url:e},t)}else t=Object.assign({},r);var s;t.headers=(s=t.headers)?Object.keys(s).reduce((e,r)=>(e[r.toLowerCase()]=s[r],e),{}):{};const i=function e(r,t){const s=Object.assign({},r);return Object.keys(t).forEach(i=>{o()(t[i])?i in r?s[i]=e(r[i],t[i]):Object.assign(s,{[i]:t[i]}):Object.assign(s,{[i]:t[i]})}),s}(e||{},t);return e&&e.mediaType.previews.length&&(i.mediaType.previews=e.mediaType.previews.filter(e=>!i.mediaType.previews.includes(e)).concat(i.mediaType.previews)),i.mediaType.previews=i.mediaType.previews.map(e=>e.replace(/-preview/,"")),i}const a=/\{[^}]+\}/g;function p(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function c(e,r){return Object.keys(e).filter(e=>!r.includes(e)).reduce((r,t)=>(r[t]=e[t],r),{})}function l(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map((function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e})).join("")}function u(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function m(e,r,t){return r="+"===e||"#"===e?l(r):u(r),t?u(t)+"="+r:r}function d(e){return null!=e}function h(e){return";"===e||"&"===e||"?"===e}function g(e,r){var t=["+","#",".","/",";","?","&"];return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,(function(e,s,o){if(s){let e="";const o=[];if(-1!==t.indexOf(s.charAt(0))&&(e=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach((function(t){var s=/([^:\*]*)(?::(\d+)|(\*))?/.exec(t);o.push(function(e,r,t,s){var o=e[t],i=[];if(d(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),s&&"*"!==s&&(o=o.substring(0,parseInt(s,10))),i.push(m(r,o,h(r)?t:""));else if("*"===s)Array.isArray(o)?o.filter(d).forEach((function(e){i.push(m(r,e,h(r)?t:""))})):Object.keys(o).forEach((function(e){d(o[e])&&i.push(m(r,o[e],e))}));else{const e=[];Array.isArray(o)?o.filter(d).forEach((function(t){e.push(m(r,t))})):Object.keys(o).forEach((function(t){d(o[t])&&(e.push(u(t)),e.push(m(r,o[t].toString())))})),h(r)?i.push(u(t)+"="+e.join(",")):0!==e.length&&i.push(e.join(","))}else";"===r?d(o)&&i.push(u(t)):""!==o||"&"!==r&&"?"!==r?""===o&&i.push(""):i.push(u(t)+"=");return i}(r,e,s[1],s[2]||s[3]))})),e&&"+"!==e){var i=",";return"?"===e?i="&":"#"!==e&&(i=e),(0!==o.length?e:"")+o.join(i)}return o.join(",")}return l(o)}))}function T(e){let r,t=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{+$1}"),o=Object.assign({},e.headers),i=c(e,["method","baseUrl","url","headers","request","mediaType"]);const n=function(e){const r=e.match(a);return r?r.map(p).reduce((e,r)=>e.concat(r),[]):[]}(s);var l;s=(l=s,{expand:g.bind(null,l)}).expand(i),/^http/.test(s)||(s=e.baseUrl+s);const u=c(i,Object.keys(e).filter(e=>n.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(r=>r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,"application/vnd$1$2."+e.mediaType.format)).join(",")),e.mediaType.previews.length)){const r=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=r.concat(e.mediaType.previews).map(r=>`application/vnd.github.${r}-preview${e.mediaType.format?"."+e.mediaType.format:"+json"}`).join(",")}return["GET","HEAD"].includes(t)?s=function(e,r){const t=/\?/.test(e)?"&":"?",s=Object.keys(r);return 0===s.length?e:e+t+s.map(e=>"q"===e?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(r[e])}`).join("&")}(s,u):"data"in u?r=u.data:Object.keys(u).length?r=u:o["content-length"]=0,o["content-type"]||void 0===r||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&void 0===r&&(r=""),Object.assign({method:t,url:s,headers:o},void 0!==r?{body:r}:null,e.request?{request:e.request}:null)}function w(e,r,t){return T(n(e,r,t))}const E=function e(r,t){const s=n(r,t),o=w.bind(null,s);return Object.assign(o,{DEFAULTS:s,defaults:e.bind(null,s),merge:n.bind(null,s),parse:T})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":"octokit-endpoint.js/6.0.1 "+Object(i.getUserAgent)()},mediaType:{format:"",previews:[]}});var b=t(339),f=t.n(b),v=t(309);function y(e){(o()(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let r,t,s={};return(e.request&&e.request.fetch||f.a)(e.url,Object.assign({method:e.method,body:e.body,headers:e.headers,redirect:e.redirect},e.request)).then(o=>{t=o.url,r=o.status;for(const e of o.headers)s[e[0]]=e[1];if(204===r||205===r)return;if("HEAD"===e.method){if(r<400)return;throw new v.a(o.statusText,r,{headers:s,request:e})}if(304===r)throw new v.a("Not modified",r,{headers:s,request:e});if(r>=400)return o.text().then(t=>{const o=new v.a(t,r,{headers:s,request:e});try{let e=JSON.parse(o.message);Object.assign(o,e);let r=e.errors;o.message=o.message+": "+r.map(JSON.stringify).join(", ")}catch(e){}throw o});const i=o.headers.get("content-type");return/application\/json/.test(i)?o.json():!i||/^text\/|charset=utf-8$/.test(i)?o.text():function(e){return e.arrayBuffer()}(o)}).then(e=>({status:r,url:t,headers:s,data:e})).catch(r=>{if(r instanceof v.a)throw r;throw new v.a(r.message,500,{headers:s,request:e})})}const _=function e(r,t){const s=r.defaults(t);return Object.assign((function(r,t){const o=s.merge(r,t);if(!o.request||!o.request.hook)return y(s.parse(o));const i=(e,r)=>y(s.parse(s.merge(e,r)));return Object.assign(i,{endpoint:s,defaults:e.bind(null,s)}),o.request.hook(i,o)}),{endpoint:s,defaults:e.bind(null,s)})}(E,{headers:{"user-agent":"octokit-request.js/5.4.2 "+Object(i.getUserAgent)()}})},306:function(e,r,t){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var s=t(338);function o(e){return!0===s(e)&&"[object Object]"===Object.prototype.toString.call(e)}e.exports=function(e){var r,t;return!1!==o(e)&&("function"==typeof(r=e.constructor)&&(!1!==o(t=r.prototype)&&!1!==t.hasOwnProperty("isPrototypeOf")))}},309:function(e,r,t){"use strict";t.d(r,"a",(function(){return n}));class s extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var o=t(340);const i=t.n(o)()(e=>console.warn(e));class n extends Error{constructor(e,r,t){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=r,Object.defineProperty(this,"code",{get:()=>(i(new s("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),r)}),this.headers=t.headers||{};const o=Object.assign({},t.request);t.request.headers.authorization&&(o.headers=Object.assign({},t.request.headers,{authorization:t.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),o.url=o.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=o}}},334:function(e,r,t){var s=t(335),o=t(336),i=t(337),n=Function.bind,a=n.bind(n);function p(e,r,t){var s=a(i,null).apply(null,t?[r,t]:[r]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach((function(s){var i=t?[r,s,t]:[r,s];e[s]=e.api[s]=a(o,null).apply(null,i)}))}function c(){var e={registry:{}},r=s.bind(null,e);return p(r,e),r}var l=!1;function u(){return l||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),l=!0),c()}u.Singular=function(){var e={registry:{}},r=s.bind(null,e,"h");return p(r,e,"h"),r}.bind(),u.Collection=c.bind(),e.exports=u,e.exports.Hook=u,e.exports.Singular=u.Singular,e.exports.Collection=u.Collection},335:function(e,r){e.exports=function e(r,t,s,o){if("function"!=typeof s)throw new Error("method for before hook must be a function");o||(o={});if(Array.isArray(t))return t.reverse().reduce((function(t,s){return e.bind(null,r,s,t,o)}),s)();return Promise.resolve().then((function(){return r.registry[t]?r.registry[t].reduce((function(e,r){return r.hook.bind(null,e,o)}),s)():s(o)}))}},336:function(e,r){e.exports=function(e,r,t,s){var o=s;e.registry[t]||(e.registry[t]=[]);"before"===r&&(s=function(e,r){return Promise.resolve().then(o.bind(null,r)).then(e.bind(null,r))});"after"===r&&(s=function(e,r){var t;return Promise.resolve().then(e.bind(null,r)).then((function(e){return o(t=e,r)})).then((function(){return t}))});"error"===r&&(s=function(e,r){return Promise.resolve().then(e.bind(null,r)).catch((function(e){return o(e,r)}))});e.registry[t].push({hook:s,orig:o})}},337:function(e,r){e.exports=function(e,r,t){if(!e.registry[r])return;var s=e.registry[r].map((function(e){return e.orig})).indexOf(t);if(-1===s)return;e.registry[r].splice(s,1)}},338:function(e,r,t){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return null!=e&&"object"==typeof e&&!1===Array.isArray(e)}},339:function(e,r,t){"use strict";var s=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==s)return s;throw new Error("unable to locate global object")}();e.exports=r=s.fetch,r.default=s.fetch.bind(s),r.Headers=s.Headers,r.Request=s.Request,r.Response=s.Response},340:function(e,r,t){var s=t(341);function o(e){var r=function(){return r.called?r.value:(r.called=!0,r.value=e.apply(this,arguments))};return r.called=!1,r}function i(e){var r=function(){if(r.called)throw new Error(r.onceError);return r.called=!0,r.value=e.apply(this,arguments)},t=e.name||"Function wrapped with `once`";return r.onceError=t+" shouldn't be called more than once",r.called=!1,r}e.exports=s(o),e.exports.strict=s(i),o.proto=o((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return o(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return i(this)},configurable:!0})}))},341:function(e,r){e.exports=function e(r,t){if(r&&t)return e(r)(t);if("function"!=typeof r)throw new TypeError("need wrapper function");return Object.keys(r).forEach((function(e){s[e]=r[e]})),s;function s(){for(var e=new Array(arguments.length),t=0;t<e.length;t++)e[t]=arguments[t];var s=r.apply(this,e),o=e[e.length-1];return"function"==typeof s&&s!==o&&Object.keys(o).forEach((function(e){s[e]=o[e]})),s}}},342:function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var s=t(299),o=t(275);class i extends Error{constructor(e,r){super(r.data.errors[0].message),Object.assign(this,r.data),this.name="GraphqlError",this.request=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const n=["method","baseUrl","url","headers","request","query"];function a(e,r){const t=e.defaults(r);return Object.assign((e,r)=>function(e,r,t){t=t="string"==typeof r?Object.assign({query:r},t):r;const s=Object.keys(t).reduce((e,r)=>n.includes(r)?(e[r]=t[r],e):(e.variables||(e.variables={}),e.variables[r]=t[r],e),{});return e(s).then(e=>{if(e.data.errors)throw new i(s,{data:e.data});return e.data.data})}(t,e,r),{defaults:a.bind(null,t),endpoint:s.request.endpoint})}const p=a(s.request,{headers:{"user-agent":"octokit-graphql.js/4.3.1 "+o.getUserAgent()},method:"POST",url:"/graphql"});r.graphql=p,r.withCustomRequest=function(e){return a(e,{method:"POST",url:"/graphql"})}},343:function(e,r,t){"use strict";const s=t(344),o=Symbol("max"),i=Symbol("length"),n=Symbol("lengthCalculator"),a=Symbol("allowStale"),p=Symbol("maxAge"),c=Symbol("dispose"),l=Symbol("noDisposeOnSet"),u=Symbol("lruList"),m=Symbol("cache"),d=Symbol("updateAgeOnGet"),h=()=>1;const g=(e,r,t)=>{const s=e[m].get(r);if(s){const r=s.value;if(T(e,r)){if(E(e,s),!e[a])return}else t&&(e[d]&&(s.value.now=Date.now()),e[u].unshiftNode(s));return r.value}},T=(e,r)=>{if(!r||!r.maxAge&&!e[p])return!1;const t=Date.now()-r.now;return r.maxAge?t>r.maxAge:e[p]&&t>e[p]},w=e=>{if(e[i]>e[o])for(let r=e[u].tail;e[i]>e[o]&&null!==r;){const t=r.prev;E(e,r),r=t}},E=(e,r)=>{if(r){const t=r.value;e[c]&&e[c](t.key,t.value),e[i]-=t.length,e[m].delete(t.key),e[u].removeNode(r)}};class b{constructor(e,r,t,s,o){this.key=e,this.value=r,this.length=t,this.now=s,this.maxAge=o||0}}const f=(e,r,t,s)=>{let o=t.value;T(e,o)&&(E(e,t),e[a]||(o=void 0)),o&&r.call(s,o.value,o.key,e)};e.exports=class{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[o]=e.max||1/0;const r=e.length||h;if(this[n]="function"!=typeof r?h:r,this[a]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[p]=e.maxAge||0,this[c]=e.dispose,this[l]=e.noDisposeOnSet||!1,this[d]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[o]=e||1/0,w(this)}get max(){return this[o]}set allowStale(e){this[a]=!!e}get allowStale(){return this[a]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[p]=e,w(this)}get maxAge(){return this[p]}set lengthCalculator(e){"function"!=typeof e&&(e=h),e!==this[n]&&(this[n]=e,this[i]=0,this[u].forEach(e=>{e.length=this[n](e.value,e.key),this[i]+=e.length})),w(this)}get lengthCalculator(){return this[n]}get length(){return this[i]}get itemCount(){return this[u].length}rforEach(e,r){r=r||this;for(let t=this[u].tail;null!==t;){const s=t.prev;f(this,e,t,r),t=s}}forEach(e,r){r=r||this;for(let t=this[u].head;null!==t;){const s=t.next;f(this,e,t,r),t=s}}keys(){return this[u].toArray().map(e=>e.key)}values(){return this[u].toArray().map(e=>e.value)}reset(){this[c]&&this[u]&&this[u].length&&this[u].forEach(e=>this[c](e.key,e.value)),this[m]=new Map,this[u]=new s,this[i]=0}dump(){return this[u].map(e=>!T(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)}).toArray().filter(e=>e)}dumpLru(){return this[u]}set(e,r,t){if((t=t||this[p])&&"number"!=typeof t)throw new TypeError("maxAge must be a number");const s=t?Date.now():0,a=this[n](r,e);if(this[m].has(e)){if(a>this[o])return E(this,this[m].get(e)),!1;const n=this[m].get(e).value;return this[c]&&(this[l]||this[c](e,n.value)),n.now=s,n.maxAge=t,n.value=r,this[i]+=a-n.length,n.length=a,this.get(e),w(this),!0}const d=new b(e,r,a,s,t);return d.length>this[o]?(this[c]&&this[c](e,r),!1):(this[i]+=d.length,this[u].unshift(d),this[m].set(e,this[u].head),w(this),!0)}has(e){if(!this[m].has(e))return!1;const r=this[m].get(e).value;return!T(this,r)}get(e){return g(this,e,!0)}peek(e){return g(this,e,!1)}pop(){const e=this[u].tail;return e?(E(this,e),e.value):null}del(e){E(this,this[m].get(e))}load(e){this.reset();const r=Date.now();for(let t=e.length-1;t>=0;t--){const s=e[t],o=s.e||0;if(0===o)this.set(s.k,s.v);else{const e=o-r;e>0&&this.set(s.k,s.v,e)}}}prune(){this[m].forEach((e,r)=>g(this,r,!1))}}},344:function(e,r,t){"use strict";function s(e){var r=this;if(r instanceof s||(r=new s),r.tail=null,r.head=null,r.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){r.push(e)}));else if(arguments.length>0)for(var t=0,o=arguments.length;t<o;t++)r.push(arguments[t]);return r}function o(e,r,t){var s=r===e.head?new a(t,null,r,e):new a(t,r,r.next,e);return null===s.next&&(e.tail=s),null===s.prev&&(e.head=s),e.length++,s}function i(e,r){e.tail=new a(r,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function n(e,r){e.head=new a(r,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function a(e,r,t,s){if(!(this instanceof a))return new a(e,r,t,s);this.list=s,this.value=e,r?(r.next=this,this.prev=r):this.prev=null,t?(t.prev=this,this.next=t):this.next=null}e.exports=s,s.Node=a,s.create=s,s.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var r=e.next,t=e.prev;return r&&(r.prev=t),t&&(t.next=r),e===this.head&&(this.head=r),e===this.tail&&(this.tail=t),e.list.length--,e.next=null,e.prev=null,e.list=null,r},s.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var r=this.head;e.list=this,e.next=r,r&&(r.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},s.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var r=this.tail;e.list=this,e.prev=r,r&&(r.next=e),this.tail=e,this.head||(this.head=e),this.length++}},s.prototype.push=function(){for(var e=0,r=arguments.length;e<r;e++)i(this,arguments[e]);return this.length},s.prototype.unshift=function(){for(var e=0,r=arguments.length;e<r;e++)n(this,arguments[e]);return this.length},s.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},s.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},s.prototype.forEach=function(e,r){r=r||this;for(var t=this.head,s=0;null!==t;s++)e.call(r,t.value,s,this),t=t.next},s.prototype.forEachReverse=function(e,r){r=r||this;for(var t=this.tail,s=this.length-1;null!==t;s--)e.call(r,t.value,s,this),t=t.prev},s.prototype.get=function(e){for(var r=0,t=this.head;null!==t&&r<e;r++)t=t.next;if(r===e&&null!==t)return t.value},s.prototype.getReverse=function(e){for(var r=0,t=this.tail;null!==t&&r<e;r++)t=t.prev;if(r===e&&null!==t)return t.value},s.prototype.map=function(e,r){r=r||this;for(var t=new s,o=this.head;null!==o;)t.push(e.call(r,o.value,this)),o=o.next;return t},s.prototype.mapReverse=function(e,r){r=r||this;for(var t=new s,o=this.tail;null!==o;)t.push(e.call(r,o.value,this)),o=o.prev;return t},s.prototype.reduce=function(e,r){var t,s=this.head;if(arguments.length>1)t=r;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");s=this.head.next,t=this.head.value}for(var o=0;null!==s;o++)t=e(t,s.value,o),s=s.next;return t},s.prototype.reduceReverse=function(e,r){var t,s=this.tail;if(arguments.length>1)t=r;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");s=this.tail.prev,t=this.tail.value}for(var o=this.length-1;null!==s;o--)t=e(t,s.value,o),s=s.prev;return t},s.prototype.toArray=function(){for(var e=new Array(this.length),r=0,t=this.head;null!==t;r++)e[r]=t.value,t=t.next;return e},s.prototype.toArrayReverse=function(){for(var e=new Array(this.length),r=0,t=this.tail;null!==t;r++)e[r]=t.value,t=t.prev;return e},s.prototype.slice=function(e,r){(r=r||this.length)<0&&(r+=this.length),(e=e||0)<0&&(e+=this.length);var t=new s;if(r<e||r<0)return t;e<0&&(e=0),r>this.length&&(r=this.length);for(var o=0,i=this.head;null!==i&&o<e;o++)i=i.next;for(;null!==i&&o<r;o++,i=i.next)t.push(i.value);return t},s.prototype.sliceReverse=function(e,r){(r=r||this.length)<0&&(r+=this.length),(e=e||0)<0&&(e+=this.length);var t=new s;if(r<e||r<0)return t;e<0&&(e=0),r>this.length&&(r=this.length);for(var o=this.length,i=this.tail;null!==i&&o>r;o--)i=i.prev;for(;null!==i&&o>e;o--,i=i.prev)t.push(i.value);return t},s.prototype.splice=function(e,r){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var t=0,s=this.head;null!==s&&t<e;t++)s=s.next;var i=[];for(t=0;s&&t<r;t++)i.push(s.value),s=this.removeNode(s);null===s&&(s=this.tail),s!==this.head&&s!==this.tail&&(s=s.prev);for(t=2;t<arguments.length;t++)s=o(this,s,arguments[t]);return i},s.prototype.reverse=function(){for(var e=this.head,r=this.tail,t=e;null!==t;t=t.prev){var s=t.prev;t.prev=t.next,t.next=s}return this.head=r,this.tail=e,this};try{t(345)(s)}catch(e){}},345:function(e,r,t){"use strict";e.exports=function(e){e.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}}},353:function(e,r,t){"use strict";t.d(r,"a",(function(){return E}));var s=t(275),o=t(334),i=t(299),n=t(342);async function a(e){const r=3===e.split(/\./).length?"app":/^v\d+\./.test(e)?"installation":"oauth";return{type:"token",token:e,tokenType:r}}async function p(e,r,t,s){const o=r.endpoint.merge(t,s);return o.headers.authorization=function(e){return 3===e.split(/\./).length?"bearer "+e:"token "+e}(e),r(o)}class c{constructor(e={}){const r=new o.Collection,t={baseUrl:i.request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};if(t.headers["user-agent"]=[e.userAgent,"octokit-core.js/2.5.0 "+Object(s.getUserAgent)()].filter(Boolean).join(" "),e.baseUrl&&(t.baseUrl=e.baseUrl),e.previews&&(t.mediaType.previews=e.previews),e.timeZone&&(t.headers["time-zone"]=e.timeZone),this.request=i.request.defaults(t),this.graphql=Object(n.withCustomRequest)(this.request).defaults(t),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e.log),this.hook=r,e.authStrategy){const t=e.authStrategy(Object.assign({request:this.request},e.auth));r.wrap("request",t.hook),this.auth=t}else if(e.auth){const t=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(a.bind(null,e),{hook:p.bind(null,e)})}(e.auth);r.wrap("request",t.hook),this.auth=t}else this.auth=async()=>({type:"unauthenticated"});this.constructor.plugins.forEach(r=>{Object.assign(this,r(this,e))})}static defaults(e){return class extends(this){constructor(...r){const t=r[0]||{};super(Object.assign({},e,t,t.userAgent&&e.userAgent?{userAgent:`${t.userAgent} ${e.userAgent}`}:null))}}}static plugin(e,...r){var t;e instanceof Array&&console.warn(["Passing an array of plugins to Octokit.plugin() has been deprecated.","Instead of:","  Octokit.plugin([plugin1, plugin2, ...])","Use:","  Octokit.plugin(plugin1, plugin2, ...)"].join("\n"));const s=this.plugins;let o=[...e instanceof Array?e:[e],...r];return(t=class extends(this){}).plugins=s.concat(o.filter(e=>!s.includes(e))),t}}c.VERSION="2.5.0",c.plugins=[];function l(e){e.hook.wrap("request",(r,t)=>{e.log.debug("request",t);const s=Date.now(),o=e.request.endpoint.parse(t),i=o.url.replace(t.baseUrl,"");return r(t).then(r=>(e.log.info(`${o.method} ${i} - ${r.status} in ${Date.now()-s}ms`),r)).catch(r=>{throw e.log.info(`${o.method} ${i} - ${r.status} in ${Date.now()-s}ms`),r})})}l.VERSION="1.0.0";function u(e){if(!("total_count"in e.data&&!("url"in e.data)))return e;const r=e.data.incomplete_results,t=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const o=Object.keys(e.data)[0],i=e.data[o];return e.data=i,void 0!==r&&(e.data.incomplete_results=r),void 0!==t&&(e.data.repository_selection=t),e.data.total_count=s,e}function m(e,r,t){const s="function"==typeof r?r.endpoint(t):e.request.endpoint(r,t),o="function"==typeof r?r:e.request,i=s.method,n=s.headers;let a=s.url;return{[Symbol.asyncIterator]:()=>({next:()=>a?o({method:i,url:a,headers:n}).then(u).then(e=>(a=((e.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:e})):Promise.resolve({done:!0})})}}function d(e,r,t,s){return"function"==typeof t&&(s=t,t=void 0),function e(r,t,s,o){return s.next().then(i=>{if(i.done)return t;let n=!1;return t=t.concat(o?o(i.value,(function(){n=!0})):i.value.data),n?t:e(r,t,s,o)})}(e,[],m(e,r,t)[Symbol.asyncIterator](),s)}function h(e){return{paginate:Object.assign(d.bind(null,e),{iterator:m.bind(null,e)})}}h.VERSION="2.1.0";const g={actions:{cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateSecretForRepo:["PUT /repos/{owner}/{repo}/actions/secrets/{name}"],createRegistrationToken:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveToken:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteSecretFromRepo:["DELETE /repos/{owner}/{repo}/actions/secrets/{name}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getSecret:["GET /repos/{owner}/{repo}/actions/secrets/{name}"],getSelfHostedRunner:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowJob:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listDownloadsForSelfHostedRunnerApplication:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listRepoWorkflowRuns:["GET /repos/{owner}/{repo}/actions/runs"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listSecretsForRepo:["GET /repos/{owner}/{repo}/actions/secrets"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowJobLogs:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],removeSelfHostedRunner:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],checkStarringRepo:["GET /user/starred/{owner}/{repo}",{},{renamed:["activity","checkRepoIsStarredByAuthenticatedUser"]}],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscription:["PUT /notifications",{},{renamed:["activity","getThreadSubscriptionForAuthenticatedUser"]}],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listEventsForOrg:["GET /users/{username}/events/orgs/{org}",{},{renamed:["activity","listOrgEventsForAuthenticatedUser"]}],listEventsForUser:["GET /users/{username}/events",{},{renamed:["activity","listEventsForAuthenticatedUser"]}],listFeeds:["GET /feeds",{},{renamed:["activity","getFeeds"]}],listNotifications:["GET /notifications",{},{renamed:["activity","listNotificationsForAuthenticatedUser"]}],listNotificationsForAuthenticatedUser:["GET /notifications"],listNotificationsForRepo:["GET /repos/{owner}/{repo}/notifications",{},{renamed:["activity","listRepoNotificationsForAuthenticatedUser"]}],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForOrg:["GET /orgs/{org}/events",{},{renamed:["activity","listPublicOrgEvents"]}],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markAsRead:["PUT /notifications",{},{renamed:["activity","markNotificationsAsRead"]}],markNotificationsAsRead:["PUT /notifications"],markNotificationsAsReadForRepo:["PUT /repos/{owner}/{repo}/notifications",{},{renamed:["activity","markRepoNotificationsAsRead"]}],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepo:["PUT /user/starred/{owner}/{repo}",{},{renamed:["activity","starRepoForAuthenticatedUser"]}],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepo:["DELETE /user/starred/{owner}/{repo}",{},{renamed:["activity","unstarRepoForAuthenticatedUser"]}],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{mediaType:{previews:["machine-man"]}}],checkAccountIsAssociatedWithAny:["GET /marketplace_listing/accounts/{account_id}",{},{renamed:["apps","getSubscriptionPlanForAccount"]}],checkAccountIsAssociatedWithAnyStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}",{},{renamed:["apps","getSubscriptionPlanForAccountStubbed"]}],checkToken:["POST /applications/{client_id}/token"],createContentAttachment:["POST /content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationToken:["POST /app/installations/{installation_id}/access_tokens",{mediaType:{previews:["machine-man"]}}],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}",{mediaType:{previews:["machine-man"]}}],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app",{mediaType:{previews:["machine-man"]}}],getBySlug:["GET /apps/{app_slug}",{mediaType:{previews:["machine-man"]}}],getInstallation:["GET /app/installations/{installation_id}",{mediaType:{previews:["machine-man"]}}],getOrgInstallation:["GET /orgs/{org}/installation",{mediaType:{previews:["machine-man"]}}],getRepoInstallation:["GET /repos/{owner}/{repo}/installation",{mediaType:{previews:["machine-man"]}}],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation",{mediaType:{previews:["machine-man"]}}],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listAccountsUserOrOrgOnPlan:["GET /marketplace_listing/plans/{plan_id}/accounts",{},{renamed:["apps","listAccountsForPlan"]}],listAccountsUserOrOrgOnPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",{},{renamed:["apps","listAccountsForPlanStubbed"]}],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories",{mediaType:{previews:["machine-man"]}}],listInstallations:["GET /app/installations",{mediaType:{previews:["machine-man"]}}],listInstallationsForAuthenticatedUser:["GET /user/installations",{mediaType:{previews:["machine-man"]}}],listMarketplacePurchasesForAuthenticatedUser:["GET /user/marketplace_purchases",{},{renamed:["apps","listSubscriptionsForAuthenticatedUser"]}],listMarketplacePurchasesForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed",{},{renamed:["apps","listSubscriptionsForAuthenticatedUserStubbed"]}],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listRepos:["GET /installation/repositories",{mediaType:{previews:["machine-man"]}}],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{mediaType:{previews:["machine-man"]}}],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationToken:["DELETE /installation/token"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs",{mediaType:{previews:["antiope"]}}],createSuite:["POST /repos/{owner}/{repo}/check-suites",{mediaType:{previews:["antiope"]}}],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}",{mediaType:{previews:["antiope"]}}],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}",{mediaType:{previews:["antiope"]}}],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",{mediaType:{previews:["antiope"]}}],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs",{mediaType:{previews:["antiope"]}}],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",{mediaType:{previews:["antiope"]}}],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites",{mediaType:{previews:["antiope"]}}],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",{mediaType:{previews:["antiope"]}}],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences",{mediaType:{previews:["antiope"]}}],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}",{mediaType:{previews:["antiope"]}}]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct",{mediaType:{previews:["scarlet-witch"]}}],getConductCode:["GET /codes_of_conduct/{key}",{mediaType:{previews:["scarlet-witch"]}}],getForRepo:["GET /repos/{owner}/{repo}/community/code_of_conduct",{mediaType:{previews:["scarlet-witch"]}}],listConductCodes:["GET /codes_of_conduct",{mediaType:{previews:["scarlet-witch"]}},{renamed:["codesOfConduct","getAllCodesOfConduct"]}]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listPublicForUser:["GET /users/{username}/gists",{},{renamed:["gists","listForUser"]}],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getTemplate:["GET /gitignore/templates/{name}"],listTemplates:["GET /gitignore/templates"]},interactions:{addOrUpdateRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],addOrUpdateRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkAssignee:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",{mediaType:{previews:["mockingbird"]}}],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestonesForRepo:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels",{},{renamed:["issues","removeAllLabels"]}],replaceAllLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],replaceLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels",{},{renamed:["issues","replaceAllLabels"]}],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getForRepo:["GET /repos/{owner}/{repo}/license"],listCommonlyUsed:["GET /licenses"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportProgress:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],listForAuthenticatedUser:["GET /user/migrations",{mediaType:{previews:["wyandotte"]}}],listForOrg:["GET /orgs/{org}/migrations",{mediaType:{previews:["wyandotte"]}}],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],listReposForUser:["GET /user/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addOrUpdateMembership:["PUT /orgs/{org}/memberships/{username}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembership:["GET /orgs/{org}/members/{username}"],checkPublicMembership:["GET /orgs/{org}/public_members/{username}"],concealMembership:["DELETE /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createHook:["POST /orgs/{org}/hooks"],createInvitation:["POST /orgs/{org}/invitations"],deleteHook:["DELETE /orgs/{org}/hooks/{hook_id}"],get:["GET /orgs/{org}"],getHook:["GET /orgs/{org}/hooks/{hook_id}"],getMembership:["GET /orgs/{org}/memberships/{username}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],list:["GET /organizations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listHooks:["GET /orgs/{org}/hooks"],listInstallations:["GET /orgs/{org}/installations",{mediaType:{previews:["machine-man"]}}],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMemberships:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],pingHook:["POST /orgs/{org}/hooks/{hook_id}/pings"],publicizeMembership:["PUT /orgs/{org}/public_members/{username}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembership:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateHook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateMembership:["PATCH /user/memberships/orgs/{org}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],createCard:["POST /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],createColumn:["POST /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],createForAuthenticatedUser:["POST /user/projects",{mediaType:{previews:["inertia"]}}],createForOrg:["POST /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],createForRepo:["POST /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],delete:["DELETE /projects/{project_id}",{mediaType:{previews:["inertia"]}}],deleteCard:["DELETE /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],deleteColumn:["DELETE /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],get:["GET /projects/{project_id}",{mediaType:{previews:["inertia"]}}],getCard:["GET /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],getColumn:["GET /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],listCards:["GET /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],listCollaborators:["GET /projects/{project_id}/collaborators",{mediaType:{previews:["inertia"]}}],listColumns:["GET /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],listForOrg:["GET /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],listForRepo:["GET /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],listForUser:["GET /users/{username}/projects",{mediaType:{previews:["inertia"]}}],moveCard:["POST /projects/columns/cards/{card_id}/moves",{mediaType:{previews:["inertia"]}}],moveColumn:["POST /projects/columns/{column_id}/moves",{mediaType:{previews:["inertia"]}}],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],reviewUserPermissionLevel:["GET /projects/{project_id}/collaborators/{username}/permission",{mediaType:{previews:["inertia"]}}],update:["PATCH /projects/{project_id}",{mediaType:{previews:["inertia"]}}],updateCard:["PATCH /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],updateColumn:["PATCH /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewCommentReply:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReviewRequest:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],deleteComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewRequest:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],getCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listReviewRequests:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",{mediaType:{previews:["lydian"]}}],updateComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],delete:["DELETE /reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}},{renamed:["reactions","deleteLegacy"]}],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteLegacy:["DELETE /reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}},{deprecated:"octokit.reactions.deleteLegacy() is deprecated, see https://developer.github.com/v3/reactions/#delete-a-reaction-legacy"}],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}"],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addDeployKey:["POST /repos/{owner}/{repo}/keys"],addProtectedBranchAdminEnforcement:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],addProtectedBranchAppRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addProtectedBranchRequiredSignatures:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],addProtectedBranchRequiredStatusChecksContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addProtectedBranchTeamRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addProtectedBranchUserRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createHook:["POST /repos/{owner}/{repo}/hooks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateFile:["PUT /repos/{owner}/{repo}/contents/{path}"],createRelease:["POST /repos/{owner}/{repo}/releases"],createStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate",{mediaType:{previews:["baptiste"]}}],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDownload:["DELETE /repos/{owner}/{repo}/downloads/{download_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteHook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],disablePagesSite:["DELETE /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],enablePagesSite:["POST /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],get:["GET /repos/{owner}/{repo}"],getAllTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getArchiveLink:["GET /repos/{owner}/{repo}/{archive_format}/{ref}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getContents:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getDownload:["GET /repos/{owner}/{repo}/downloads/{download_id}"],getHook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getProtectedBranchAdminEnforcement:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getProtectedBranchPullRequestReviewEnforcement:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getProtectedBranchRequiredSignatures:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],getProtectedBranchRequiredStatusChecks:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getProtectedBranchRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],list:["GET /user/repos",{},{renamed:["repos","listForAuthenticatedUser"]}],listAssetsForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",{mediaType:{previews:["groot"]}}],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitComments:["GET /repos/{owner}/{repo}/comments"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listDownloads:["GET /repos/{owner}/{repo}/downloads"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listHooks:["GET /repos/{owner}/{repo}/hooks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listProtectedBranchRequiredStatusChecksContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",{mediaType:{previews:["groot"]}}],listReleases:["GET /repos/{owner}/{repo}/releases"],listStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}},{renamed:["repos","getAllTopics"]}],merge:["POST /repos/{owner}/{repo}/merges"],pingHook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],removeBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],removeProtectedBranchAdminEnforcement:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],removeProtectedBranchAppRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeProtectedBranchPullRequestReviewEnforcement:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],removeProtectedBranchRequiredSignatures:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],removeProtectedBranchRequiredStatusChecks:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeProtectedBranchRequiredStatusChecksContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeProtectedBranchRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],removeProtectedBranchTeamRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeProtectedBranchUserRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],replaceProtectedBranchAppRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],replaceProtectedBranchRequiredStatusChecksContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],replaceProtectedBranchTeamRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],replaceProtectedBranchUserRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],replaceTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}},{renamed:["repos","replaceAllTopics"]}],requestPageBuild:["POST /repos/{owner}/{repo}/pages/builds"],retrieveCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],testPushHook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateHook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateProtectedBranchPullRequestReviewEnforcement:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateProtectedBranchRequiredStatusChecks:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits",{mediaType:{previews:["cloak"]}}],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},teams:{addOrUpdateMembershipInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],addOrUpdateRepoInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkManagesRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects",{mediaType:{previews:["inertia"]}}],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],reviewProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmails:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowing:["GET /user/following/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],createGpgKey:["POST /user/gpg_keys"],createPublicKey:["POST /user/keys"],deleteEmails:["DELETE /user/emails"],deleteGpgKey:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicKey:["DELETE /user/keys/{key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKey:["GET /user/gpg_keys/{gpg_key_id}"],getPublicKey:["GET /user/keys/{key_id}"],list:["GET /users"],listBlocked:["GET /user/blocks"],listEmails:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForAuthenticatedUser:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticated"]}],listFollowingForUser:["GET /users/{username}/following"],listGpgKeys:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmails:["GET /user/public_emails"],listPublicKeys:["GET /user/keys"],listPublicKeysForUser:["GET /users/{username}/keys"],togglePrimaryEmailVisibility:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};function T(e,r,t,s,o){const i=e.request.defaults(s);return Object.assign((function(...s){let n=i.endpoint.merge(...s);if(o.mapToData)return n=Object.assign({},n,{data:n[o.mapToData],[o.mapToData]:void 0}),i(n);if(o.renamed){const[s,i]=o.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${s}.${i}()`)}return o.deprecated&&e.log.warn(o.deprecated),i(...s)}),i)}function w(e){return function(e,r){const t={};for(const[s,o]of Object.entries(r))for(const[r,i]of Object.entries(o)){const[o,n,a]=i,[p,c]=o.split(/ /),l=Object.assign({method:p,url:c},n);t[s]||(t[s]={});const u=t[s];a?u[r]=T(e,s,r,l,a):u[r]=e.request.defaults(l)}return t}(e,g)}w.VERSION="3.7.1";const E=c.plugin(l,w,h).defaults({userAgent:"octokit-rest.js/17.5.1"})},354:function(e,r,t){"use strict";t.d(r,"a",(function(){return b}));var s=t(275),o=t(299);function i(e){const r=new ArrayBuffer(e.length),t=new Uint8Array(r);for(let r=0,s=e.length;r<s;r++)t[r]=e.charCodeAt(r);return r}function n(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function a(e){return n(btoa(JSON.stringify(e)))}const p=async({privateKey:e,payload:r})=>{if(/BEGIN RSA PRIVATE KEY/.test(e))throw new Error("[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#readme");const t={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},s=function(e){const r=e.trim().split("\n").slice(1,-1).join("");return i(atob(r))}(e),o=await crypto.subtle.importKey("pkcs8",s,t,!1,["sign"]),p=function(e,r){return`${a(e)}.${a(r)}`}({alg:"RS256",typ:"JWT"},r),c=i(p);return`${p}.${function(e){for(var r="",t=new Uint8Array(e),s=t.byteLength,o=0;o<s;o++)r+=String.fromCharCode(t[o]);return n(btoa(r))}(await crypto.subtle.sign(t.name,o,c))}`};var c=t(343),l=t.n(c),u=t(309);async function m(e,r){const t=await async function({id:e,privateKey:r}){const t=Math.floor(Date.now()/1e3)-30,s=t+600,o={iat:t,exp:s,iss:e};return{appId:e,expiration:s,token:await p({privateKey:r,payload:o})}}({id:e,privateKey:r});return{type:"app",token:t.token,appId:t.appId,expiresAt:new Date(1e3*t.expiration).toISOString()}}function d({installationId:e,permissions:r={},repositoryIds:t=[]}){const s=Object.keys(r).sort().map(e=>"read"===r[e]?e:e+"!").join(",");return[e,t.sort().join(","),s].filter(Boolean).join("|")}function h({installationId:e,token:r,expiresAt:t,repositorySelection:s,permissions:o,repositoryIds:i,singleFileName:n}){return Object.assign({type:"token",tokenType:"installation",token:r,installationId:e,permissions:o,expiresAt:t,repositorySelection:s},i?{repositoryIds:i}:null,n?{singleFileName:n}:null)}async function g(e,r,t){const s=r.installationId||e.installationId;if(!r.refresh){const t=await async function(e,r){const t=d(r),s=await e.get(t);if(!s)return;const[o,i,n,a,p]=s.split("|");return{token:o,expiresAt:i,permissions:r.permissions||a.split(/,/).reduce((e,r)=>(/!$/.test(r)?e[r.slice(0,-1)]="write":e[r]="read",e),{}),repositoryIds:r.repositoryIds,singleFileName:p,repositorySelection:n}}(e.cache,r);if(t){const{token:e,expiresAt:r,permissions:o,repositoryIds:i,singleFileName:n,repositorySelection:a}=t;return h({installationId:s,token:e,expiresAt:r,permissions:o,repositorySelection:a,repositoryIds:i,singleFileName:n})}}const o=await m(e.id,e.privateKey),i=t||e.request,{data:{token:n,expires_at:a,repositories:p,permissions:c,repository_selection:l,single_file:u}}=await i("POST /app/installations/:installation_id/access_tokens",{installation_id:s,repository_ids:r.repositoryIds,permissions:r.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:"bearer "+o.token}}),g=p?p.map(e=>e.id):void 0;return await async function(e,r,t){const s=d(r),o=r.permissions?"":Object.keys(t.permissions).map(e=>`${e}${"write"===t.permissions[e]?"!":""}`).join(",");await e.set(s,[t.token,t.expiresAt,t.repositorySelection,o,t.singleFileName].join("|").replace(/\|+$/,""))}(e.cache,r,{token:n,expiresAt:a,repositorySelection:l,permissions:c,repositoryIds:g,singleFileName:u}),h({installationId:s,token:n,expiresAt:a,repositorySelection:l,permissions:c,repositoryIds:g,singleFileName:u})}async function T(e,r){return"app"===r.type?m(e.id,e.privateKey):"installation"===r.type?g(e,r):async function(e,r,t){const s=t||e.request,o=/^https:\/\/(api\.)?github\.com$/.test(e.request.endpoint.DEFAULTS.baseUrl)?"POST https://github.com/login/oauth/access_token":"POST "+e.request.endpoint.DEFAULTS.baseUrl.replace("/api/v3","/login/oauth/access_token"),i={headers:{accept:"application/json"},client_id:e.clientId,client_secret:e.clientSecret,code:r.code,state:r.state,redirect_uri:r.redirectUrl},n=await s(o,i);if(void 0!==n.data.error)throw new u.a(`${n.data.error_description} (${n.data.error})`,n.status,{headers:n.headers,request:s.endpoint(o,i)});const{data:{access_token:a,scope:p}}=n;return{type:"token",tokenType:"oauth",token:a,scopes:p.split(/,\s*/).filter(Boolean)}}(e,r)}const w=function(e){const r=`^(?:${e.map(e=>e.split("/").map(e=>e.startsWith(":")?"(?:.+?)":e).join("/")).map(e=>`(?:${e})`).join("|")})[^/]*$`;return new RegExp(r,"i")}(["/app","/app/installations","/app/installations/:installation_id","/app/installations/:installation_id","/app/installations/:installation_id/access_tokens","/orgs/:org/installation","/orgs/:org/installation","/repos/:owner/:repo/installation","/repos/:owner/:repo/installation","/users/:username/installation","/users/:username/installation"]);async function E(e,r,t,s){let o=r.endpoint.merge(t,s);if((i=o.url.replace(r.endpoint.DEFAULTS.baseUrl,""))&&w.test(i)){const{token:t}=await m(e.id,e.privateKey);return o.headers.authorization="bearer "+t,r(o)}var i;const{token:n}=await g(e,{},r);return o.headers.authorization="token "+n,r(o)}const b=function(e){const r=Object.assign({request:o.request.defaults({headers:{"user-agent":"octokit-auth-app.js/2.4.5 "+Object(s.getUserAgent)()}}),cache:new l.a({max:15e3,maxAge:354e4})},e);return Object.assign(T.bind(null,r),{hook:E.bind(null,r)})}}}]);